{
  "name": "Pipe_Generic_File_To_Target_Lake",
  "properties": {
    "activities": [
      {
        "name": "LKP - Get the schema and table definitions",
        "type": "Lookup",
        "dependsOn": [],
        "policy": {
          "timeout": "7.00:00:00",
          "retry": 0,
          "retryIntervalInSeconds": 30,
          "secureOutput": false,
          "secureInput": false
        },
        "userProperties": [],
        "typeProperties": {
          "source": {
            "type": "AzureSqlSource",
            "sqlReaderStoredProcedureName": "[DI].[usp_StagingTableScript_Generate]",
            "storedProcedureParameters": {
              "TaskID": {
                "type": "Int32",
                "value": {
                  "value": "@pipeline().parameters.TaskID",
                  "type": "Expression"
                }
              }
            },
            "partitionOption": "None"
          },
          "dataset": {
            "referenceName": "Generic_AzureSQL",
            "type": "DatasetReference",
            "parameters": {
              "secretName": "sqlDatabaseConnectionStringConfig"
            }
          }
        }
      },
      {
        "name": "If - Delta Lake",
        "type": "IfCondition",
        "dependsOn": [
          {
            "activity": "LKP - Get the schema and table definitions",
            "dependencyConditions": ["Succeeded"]
          }
        ],
        "userProperties": [],
        "typeProperties": {
          "expression": {
            "value": "@equals(pipeline().parameters.TargetConfig.value[0].UseDeltaLakeIndicator, 'Y')",
            "type": "Expression"
          },
          "ifTrueActivities": [
            {
              "name": "EP - Parquet to Lake Load",
              "type": "ExecutePipeline",
              "dependsOn": [],
              "userProperties": [],
              "typeProperties": {
                "pipeline": {
                  "referenceName": "Pipe_Generic_Databricks_Parquet_Load_Delta_Lake",
                  "type": "PipelineReference"
                },
                "waitOnCompletion": true,
                "parameters": {
                  "PreviousTargetFilePath": {
                    "value": "@string('')",
                    "type": "Expression"
                  },
                  "TargetFilePath": {
                    "value": "@concat(pipeline().parameters.TargetConfig.value[0].TargetFilePath, variables('TargetFileName'))",
                    "type": "Expression"
                  },
                  "TargetTempTable": {
                    "value": "@pipeline().parameters.TargetConfig.value[0].TargetTempTable",
                    "type": "Expression"
                  },
                  "LoadType": {
                    "value": "@if(greater(length(pipeline().parameters.TargetConfig.value[0].LoadType), 0), pipeline().parameters.TargetConfig.value[0].LoadType, 'Full')",
                    "type": "Expression"
                  },
                  "TargetDatabase": {
                    "value": "@pipeline().parameters.TargetConfig.value[0].TargetDatabase",
                    "type": "Expression"
                  },
                  "UniqueConstraintIndicator": {
                    "value": "@activity('LKP - Get the schema and table definitions').output.firstRow.UniqueConstraintIndicator",
                    "type": "Expression"
                  },
                  "TaskType": {
                    "value": "@pipeline().parameters.TaskType",
                    "type": "Expression"
                  },
                  "TargetTable": {
                    "value": "@pipeline().parameters.TargetConfig.value[0].TargetTable",
                    "type": "Expression"
                  },
                  "TargetDeltaFilePath": {
                    "value": "@pipeline().parameters.TargetConfig.value[0].TargetDeltaFilePath",
                    "type": "Expression"
                  },
                  "UniqueConstraintColumns": {
                    "value": "@activity('LKP - Get the schema and table definitions').output.firstRow.UniqueConstraintColumns",
                    "type": "Expression"
                  },
                  "UseDeltaLakeIndicator": {
                    "value": "@pipeline().parameters.TargetConfig.value[0].UseDeltaLakeIndicator",
                    "type": "Expression"
                  },
                  "DeltaLakeRetentionDays": {
                    "value": "@pipeline().parameters.TargetConfig.value[0].DeltaLakeRetentionDays",
                    "type": "Expression"
                  },
                  "AllowSchemaDrift": {
                    "value": "@pipeline().parameters.TargetConfig.value[0].AllowSchemaDrift",
                    "type": "Expression"
                  },
                  "PipelineName": {
                    "value": "@pipeline().Pipeline",
                    "type": "Expression"
                  },
                  "PipelineRunID": {
                    "value": "@pipeline().RunId",
                    "type": "Expression"
                  },
                  "PipelineTriggerID": {
                    "value": "@pipeline().TriggerId",
                    "type": "Expression"
                  },
                  "PipelineTriggerName": {
                    "value": "@pipeline().TriggerName",
                    "type": "Expression"
                  },
                  "PipelineTriggerTime": {
                    "value": "@pipeline().TriggerTime",
                    "type": "Expression"
                  },
                  "PipelineTriggerType": {
                    "value": "@pipeline().TriggerType",
                    "type": "Expression"
                  },
                  "TaskInstanceID": {
                    "value": "@pipeline().parameters.TaskInstanceID",
                    "type": "Expression"
                  },
                  "DatabricksURL": {
                    "value": "@pipeline().parameters.ETLConfig.value[0].DatabricksURL",
                    "type": "Expression"
                  },
                  "DatabricksClusterID": {
                    "value": "@pipeline().parameters.ETLConfig.value[0].DatabricksClusterID",
                    "type": "Expression"
                  },
                  "FileLoadConfig": {
                    "value": "@pipeline().parameters.FileLoadConfig",
                    "type": "Expression"
                  },
                  "FileLoadType": {
                    "value": "@pipeline().parameters.FileLoadType",
                    "type": "Expression"
                  },
                  "SourceConfig": {
                    "value": "@pipeline().parameters.SourceConfig",
                    "type": "Expression"
                  },
                  "TaskConfig": {
                    "value": "@{pipeline().parameters.TaskConfig.value}",
                    "type": "Expression"
                  },
                  "WhereClause": {
                    "value": "@string('')",
                    "type": "Expression"
                  },
                  "TaskSchema": {
                    "value": "@{activity('LKP - Get the schema and table definitions').output.firstRow.SchemaJson}",
                    "type": "Expression"
                  }
                }
              }
            }
          ]
        }
      },
      {
        "name": "CD - Write the schema file to the lake",
        "type": "Copy",
        "dependsOn": [
          {
            "activity": "If - Delta Lake",
            "dependencyConditions": ["Succeeded"]
          }
        ],
        "policy": {
          "timeout": "7.00:00:00",
          "retry": 0,
          "retryIntervalInSeconds": 30,
          "secureOutput": false,
          "secureInput": false
        },
        "userProperties": [],
        "typeProperties": {
          "source": {
            "type": "AzureSqlSource",
            "sqlReaderStoredProcedureName": "[DI].[usp_StagingTableScript_Generate]",
            "storedProcedureParameters": {
              "SchemaOnly": {
                "type": "Boolean",
                "value": "True"
              },
              "TaskID": {
                "type": "Int32",
                "value": {
                  "value": "@pipeline().parameters.TaskID",
                  "type": "Expression"
                }
              }
            },
            "partitionOption": "None"
          },
          "sink": {
            "type": "DelimitedTextSink",
            "storeSettings": {
              "type": "AzureBlobFSWriteSettings"
            },
            "formatSettings": {
              "type": "DelimitedTextWriteSettings",
              "quoteAllText": true,
              "fileExtension": ".json"
            }
          },
          "enableStaging": false
        },
        "inputs": [
          {
            "referenceName": "Generic_AzureSQL",
            "type": "DatasetReference",
            "parameters": {
              "secretName": "sqlDatabaseConnectionStringConfig"
            }
          }
        ],
        "outputs": [
          {
            "referenceName": "Generic_DatalakeGen2_Csv_NoHeader_AzureIR",
            "type": "DatasetReference",
            "parameters": {
              "dataLakeServiceEndPoint": {
                "value": "@pipeline().parameters.TargetConfig.value[0].ServiceEndpoint",
                "type": "Expression"
              },
              "dataLakeFilePath": {
                "value": "@replace(pipeline().parameters.TargetConfig.value[0].TargetFilePath, '/Raw/', '/Schema/')",
                "type": "Expression"
              },
              "dataLakeFileName": {
                "value": "@replace(variables('TargetFileName'), '.parquet', '.json')",
                "type": "Expression"
              }
            }
          }
        ]
      },
      {
        "name": "SP - Log the error - Write schema file",
        "type": "SqlServerStoredProcedure",
        "dependsOn": [
          {
            "activity": "CD - Write the schema file to the lake",
            "dependencyConditions": ["Failed"]
          }
        ],
        "policy": {
          "timeout": "7.00:00:00",
          "retry": 0,
          "retryIntervalInSeconds": 30,
          "secureOutput": false,
          "secureInput": false
        },
        "userProperties": [],
        "typeProperties": {
          "storedProcedureName": "[DI].[usp_DataFactoryLog_Insert]",
          "storedProcedureParameters": {
            "ActivityName": {
              "value": "CD - Write the schema file to the lake",
              "type": "String"
            },
            "DataFactoryName": {
              "value": {
                "value": "@{pipeline().DataFactory}",
                "type": "Expression"
              },
              "type": "String"
            },
            "ErrorMessage": {
              "value": {
                "value": "@{activity('CD - Write the schema file to the lake').Error.message}",
                "type": "Expression"
              },
              "type": "String"
            },
            "OutputMessage": {
              "value": {
                "value": "@{activity('CD - Write the schema file to the lake').output}",
                "type": "Expression"
              },
              "type": "String"
            },
            "PipelineName": {
              "value": {
                "value": "@{pipeline().Pipeline}",
                "type": "Expression"
              },
              "type": "String"
            },
            "PipelineRunID": {
              "value": {
                "value": "@{pipeline().RunId}",
                "type": "Expression"
              },
              "type": "String"
            },
            "PipelineTriggerID": {
              "value": {
                "value": "@{pipeline().TriggerId}",
                "type": "Expression"
              },
              "type": "String"
            },
            "PipelineTriggerName": {
              "value": {
                "value": "@{pipeline().TriggerName}",
                "type": "Expression"
              },
              "type": "String"
            },
            "PipelineTriggerTime": {
              "value": {
                "value": "@{pipeline().TriggerTime}",
                "type": "Expression"
              },
              "type": "String"
            },
            "PipelineTriggerType": {
              "value": {
                "value": "@{pipeline().TriggerType}",
                "type": "Expression"
              },
              "type": "String"
            },
            "TaskInstanceID": {
              "value": {
                "value": "@pipeline().parameters.TaskInstanceID",
                "type": "Expression"
              },
              "type": "Int64"
            },
            "LogType": {
              "value": "Error",
              "type": "String"
            }
          }
        },
        "linkedServiceName": {
          "referenceName": "AzureSQL",
          "type": "LinkedServiceReference",
          "parameters": {
            "secretName": "sqlDatabaseConnectionStringConfig"
          }
        }
      }
    ],
    "parameters": {
      "TaskID": {
        "type": "int"
      },
      "TaskInstanceID": {
        "type": "int"
      },
      "TargetConfig": {
        "type": "object"
      },
      "SourceConfig": {
        "type": "object"
      },
      "TaskType": {
        "type": "string"
      },
      "TaskConfig": {
        "type": "object"
      },
      "KeyVaultName": {
        "type": "string"
      },
      "ETLConfig": {
        "type": "object"
      },
      "FileLoadConfig": {
        "type": "object"
      },
      "FileLoadType": {
        "type": "string"
      }
    },
    "variables": {
      "TargetFileName": {
        "type": "String"
      }
    },
    "folder": {
      "name": "ETL/File Load"
    },
    "annotations": []
  },
  "type": "Microsoft.DataFactory/factories/pipelines"
}
