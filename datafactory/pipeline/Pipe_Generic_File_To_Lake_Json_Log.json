{
	"name": "Pipe_Generic_File_To_Lake_Json_Log",
	"properties": {
		"description": "This pipeline is used to copy json files from source into the data lake",
		"activities": [
			{
				"name": "IF - Task type is FileSys Json File to Lake",
				"type": "IfCondition",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(or(equals(toUpper(pipeline().parameters.TaskType), toUpper('File System File to Lake')),equals(toUpper(pipeline().parameters.TaskType), toUpper('File System File to SQL'))),equals(pipeline().parameters.Log,true))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "CD - Write the json file to the lake - FileSys to Lake",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "FN - Get file system password json",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": true
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "JsonSource",
									"storeSettings": {
										"type": "FileServerReadSettings",
										"recursive": true
									},
									"formatSettings": {
										"type": "JsonReadSettings"
									}
								},
								"sink": {
									"type": "ParquetSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									}
								},
								"enableStaging": false,
								"translator": {
									"value": "@pipeline().parameters.SchemaMapping",
									"type": "Expression"
								}
							},
							"inputs": [
								{
									"referenceName": "Generic_Local_Json",
									"type": "DatasetReference",
									"parameters": {
										"host": {
											"value": "@pipeline().parameters.Host",
											"type": "Expression"
										},
										"filePath": {
											"value": "@pipeline().parameters.SourceFilePath",
											"type": "Expression"
										},
										"fileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"compressionType": {
											"value": "@pipeline().parameters.CompressionType",
											"type": "Expression"
										},
										"userid": {
											"value": "@activity('FN - Get file system username json').output.Response",
											"type": "Expression"
										},
										"password": {
											"value": "@activity('FN - Get file system password json').output.Response",
											"type": "Expression"
										},
										"encoding": {
											"value": "@pipeline().parameters.Encoding",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "Generic_DatalakeGen2_Parquet_AzureIR",
									"type": "DatasetReference",
									"parameters": {
										"dataLakeServiceEndPoint": {
											"value": "@pipeline().parameters.TargetServiceEndPoint",
											"type": "Expression"
										},
										"dataLakeFilePath": {
											"value": "@pipeline().parameters.TargetFilePath",
											"type": "Expression"
										},
										"dataLakeFileName": {
											"value": "@pipeline().parameters.TargetFileName",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "SP - Log the error - Write json to lake-FileSys to Lake",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "CD - Write the json file to the lake - FileSys to Lake",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[DI].[usp_DataFactoryLog_Insert]",
								"storedProcedureParameters": {
									"ActivityName": {
										"value": "CD - Write the file to the lake - Blob to Lake",
										"type": "String"
									},
									"DataFactoryName": {
										"value": {
											"value": "@{pipeline().DataFactory}",
											"type": "Expression"
										},
										"type": "String"
									},
									"ErrorMessage": {
										"value": {
											"value": "@activity('CD - Write the json file to the lake - FileSys to Lake').Error.message",
											"type": "Expression"
										},
										"type": "String"
									},
									"OutputMessage": {
										"value": {
											"value": "@{activity('CD - Write the json file to the lake - FileSys to Lake').output}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineName": {
										"value": {
											"value": "@{pipeline().Pipeline}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineRunID": {
										"value": {
											"value": "@{pipeline().RunId}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineTriggerID": {
										"value": {
											"value": "@{pipeline().TriggerId}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineTriggerName": {
										"value": {
											"value": "@{pipeline().TriggerName}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineTriggerTime": {
										"value": {
											"value": "@{pipeline().TriggerTime}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineTriggerType": {
										"value": {
											"value": "@{pipeline().TriggerType}",
											"type": "Expression"
										},
										"type": "String"
									},
									"TaskInstanceID": {
										"value": {
											"value": "@pipeline().parameters.TaskInstanceID",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"LogType": {
										"value": "Error",
										"type": "String"
									},
									"FileLoadLogID": {
										"value": {
											"value": "@pipeline().parameters.FileLoadLogID",
											"type": "Expression"
										},
										"type": "Int64"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "AzureSQL",
								"type": "LinkedServiceReference",
								"parameters": {
									"secretName": "sqlDatabaseConnectionStringConfig"
								}
							}
						},
						{
							"name": "FN - Get file system password json",
							"type": "AzureFunctionActivity",
							"dependsOn": [
								{
									"activity": "FN - Get file system username json",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": true,
								"secureInput": true
							},
							"userProperties": [],
							"typeProperties": {
								"functionName": "GetKeyVaultSecret",
								"method": "POST",
								"body": {
									"keyvaultName": "@pipeline().parameters.KeyVaultName",
									"secretName": "onPremisesPassword"
								}
							},
							"linkedServiceName": {
								"referenceName": "AzureFunction",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "SP - Log the error - Get file system password json",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "FN - Get file system password json",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[DI].[usp_DataFactoryLog_Insert]",
								"storedProcedureParameters": {
									"ActivityName": {
										"value": "FN - Get file system password json",
										"type": "String"
									},
									"DataFactoryName": {
										"value": {
											"value": "@{pipeline().DataFactory}",
											"type": "Expression"
										},
										"type": "String"
									},
									"ErrorMessage": {
										"value": {
											"value": "@{activity('FN - Get file system password json').error.message}",
											"type": "Expression"
										},
										"type": "String"
									},
									"OutputMessage": {
										"value": {
											"value": "@{activity('FN - Get file system password json').output}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineName": {
										"value": {
											"value": "@{pipeline().Pipeline}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineRunID": {
										"value": {
											"value": "@{pipeline().RunId}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineTriggerID": {
										"value": {
											"value": "@{pipeline().TriggerId}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineTriggerName": {
										"value": {
											"value": "@{pipeline().TriggerName}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineTriggerTime": {
										"value": {
											"value": "@{pipeline().TriggerTime}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineTriggerType": {
										"value": {
											"value": "@{pipeline().TriggerType}",
											"type": "Expression"
										},
										"type": "String"
									},
									"TaskInstanceID": {
										"value": {
											"value": "@pipeline().parameters.TaskInstanceID",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"LogType": {
										"value": "Error",
										"type": "String"
									},
									"FileLoadLogID": {
										"value": {
											"value": "@pipeline().parameters.FileLoadLogID",
											"type": "Expression"
										},
										"type": "Int64"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "AzureSQL",
								"type": "LinkedServiceReference",
								"parameters": {
									"secretName": "sqlDatabaseConnectionStringConfig"
								}
							}
						},
						{
							"name": "FN - Get file system username json",
							"type": "AzureFunctionActivity",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": true,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"functionName": "GetKeyVaultSecret",
								"method": "POST",
								"body": {
									"keyvaultName": "@pipeline().parameters.KeyVaultName",
									"secretName": "onPremisesUserName"
								}
							},
							"linkedServiceName": {
								"referenceName": "AzureFunction",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "SP - Log the error - Get file system username json",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "FN - Get file system username json",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[DI].[usp_DataFactoryLog_Insert]",
								"storedProcedureParameters": {
									"ActivityName": {
										"value": "FN - Get file system username json",
										"type": "String"
									},
									"DataFactoryName": {
										"value": {
											"value": "@{pipeline().DataFactory}",
											"type": "Expression"
										},
										"type": "String"
									},
									"ErrorMessage": {
										"value": {
											"value": "@{activity('FN - Get file system username json').error.message}",
											"type": "Expression"
										},
										"type": "String"
									},
									"OutputMessage": {
										"value": {
											"value": "@{activity('FN - Get file system username json').output}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineName": {
										"value": {
											"value": "@{pipeline().Pipeline}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineRunID": {
										"value": {
											"value": "@{pipeline().RunId}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineTriggerID": {
										"value": {
											"value": "@{pipeline().TriggerId}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineTriggerName": {
										"value": {
											"value": "@{pipeline().TriggerName}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineTriggerTime": {
										"value": {
											"value": "@{pipeline().TriggerTime}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineTriggerType": {
										"value": {
											"value": "@{pipeline().TriggerType}",
											"type": "Expression"
										},
										"type": "String"
									},
									"TaskInstanceID": {
										"value": {
											"value": "@pipeline().parameters.TaskInstanceID",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"LogType": {
										"value": "Error",
										"type": "String"
									},
									"FileLoadLogID": {
										"value": {
											"value": "@pipeline().parameters.FileLoadLogID",
											"type": "Expression"
										},
										"type": "Int64"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "AzureSQL",
								"type": "LinkedServiceReference",
								"parameters": {
									"secretName": "sqlDatabaseConnectionStringConfig"
								}
							}
						},
						{
							"name": "SP - Log the error - FileLoadLog - Json FileSys to Lake",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "SP - Update FileLoadLog - Json FileSys to Lake",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[DI].[usp_DataFactoryLog_Insert]",
								"storedProcedureParameters": {
									"ActivityName": {
										"value": "CD - Write the file to the lake - Lake to Lake",
										"type": "String"
									},
									"DataFactoryName": {
										"value": {
											"value": "@{pipeline().DataFactory}",
											"type": "Expression"
										},
										"type": "String"
									},
									"ErrorMessage": {
										"value": {
											"value": "@activity('SP - Update FileLoadLog - Json FileSys to Lake').Error.message",
											"type": "Expression"
										},
										"type": "String"
									},
									"OutputMessage": {
										"value": {
											"value": "@{activity('SP - Update FileLoadLog - Json FileSys to Lake').output}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineName": {
										"value": {
											"value": "@{pipeline().Pipeline}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineRunID": {
										"value": {
											"value": "@{pipeline().RunId}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineTriggerID": {
										"value": {
											"value": "@{pipeline().TriggerId}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineTriggerName": {
										"value": {
											"value": "@{pipeline().TriggerName}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineTriggerTime": {
										"value": {
											"value": "@{pipeline().TriggerTime}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineTriggerType": {
										"value": {
											"value": "@{pipeline().TriggerType}",
											"type": "Expression"
										},
										"type": "String"
									},
									"TaskInstanceID": {
										"value": {
											"value": "@pipeline().parameters.TaskInstanceID",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"LogType": {
										"value": "Error",
										"type": "String"
									},
									"FileLoadLogID": {
										"value": {
											"value": "@pipeline().parameters.FileLoadLogID",
											"type": "Expression"
										},
										"type": "Int64"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "AzureSQL",
								"type": "LinkedServiceReference",
								"parameters": {
									"secretName": "sqlDatabaseConnectionStringConfig"
								}
							}
						},
						{
							"name": "SP - Update FileLoadLog - Json FileSys to Lake",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "CD - Write the json file to the lake - FileSys to Lake",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[DI].[usp_FileLoadLog_Update]",
								"storedProcedureParameters": {
									"FileLoadLogID": {
										"value": {
											"value": "@pipeline().parameters.FileLoadLogID",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"TargetFilePath": {
										"value": {
											"value": "@pipeline().parameters.TargetFilePath",
											"type": "Expression"
										},
										"type": "String"
									},
									"TargetFileName": {
										"value": {
											"value": "@pipeline().parameters.TargetFileName",
											"type": "Expression"
										},
										"type": "String"
									},
									"SuccessIndicator": {
										"value": "1",
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "AzureSQL",
								"type": "LinkedServiceReference",
								"parameters": {
									"secretName": "sqlDatabaseConnectionStringConfig"
								}
							}
						}
					]
				}
			},
			{
				"name": "IF - Task type is Lake Json File to Lake",
				"type": "IfCondition",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(or(equals(toUpper(pipeline().parameters.TaskType), toUpper('Azure Data Lake File to Lake')),equals(toUpper(pipeline().parameters.TaskType), toUpper('Azure Data Lake File to SQL'))),equals(pipeline().parameters.Log,true))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "CD - Write the json file to the lake - Lake to Lake",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "JsonSource",
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": true
									}
								},
								"sink": {
									"type": "ParquetSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									}
								},
								"enableStaging": false,
								"translator": {
									"value": "@pipeline().parameters.SchemaMapping",
									"type": "Expression"
								}
							},
							"inputs": [
								{
									"referenceName": "Generic_DatalakeGen2_Json",
									"type": "DatasetReference",
									"parameters": {
										"serviceEndPoint": {
											"value": "@pipeline().parameters.SourceServiceEndPoint",
											"type": "Expression"
										},
										"filePath": {
											"value": "@pipeline().parameters.SourceFilePath",
											"type": "Expression"
										},
										"fileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"compressionType": {
											"value": "@pipeline().parameters.CompressionType",
											"type": "Expression"
										},
										"encoding": {
											"value": "@pipeline().parameters.Encoding",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "Generic_DatalakeGen2_Parquet_AzureIR",
									"type": "DatasetReference",
									"parameters": {
										"dataLakeServiceEndPoint": {
											"value": "@pipeline().parameters.TargetServiceEndPoint",
											"type": "Expression"
										},
										"dataLakeFilePath": {
											"value": "@pipeline().parameters.TargetFilePath",
											"type": "Expression"
										},
										"dataLakeFileName": {
											"value": "@pipeline().parameters.TargetFileName",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "SP - Log the error - Write json to lake - Lake to Lake",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "CD - Write the json file to the lake - Lake to Lake",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[DI].[usp_DataFactoryLog_Insert]",
								"storedProcedureParameters": {
									"ActivityName": {
										"value": "CD - Write the file to the lake - Blob to Lake",
										"type": "String"
									},
									"DataFactoryName": {
										"value": {
											"value": "@{pipeline().DataFactory}",
											"type": "Expression"
										},
										"type": "String"
									},
									"ErrorMessage": {
										"value": {
											"value": "@activity('CD - Write the json file to the lake - Lake to Lake').Error.message",
											"type": "Expression"
										},
										"type": "String"
									},
									"OutputMessage": {
										"value": {
											"value": "@{activity('CD - Write the json file to the lake - Lake to Lake').output}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineName": {
										"value": {
											"value": "@{pipeline().Pipeline}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineRunID": {
										"value": {
											"value": "@{pipeline().RunId}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineTriggerID": {
										"value": {
											"value": "@{pipeline().TriggerId}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineTriggerName": {
										"value": {
											"value": "@{pipeline().TriggerName}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineTriggerTime": {
										"value": {
											"value": "@{pipeline().TriggerTime}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineTriggerType": {
										"value": {
											"value": "@{pipeline().TriggerType}",
											"type": "Expression"
										},
										"type": "String"
									},
									"TaskInstanceID": {
										"value": {
											"value": "@pipeline().parameters.TaskInstanceID",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"LogType": {
										"value": "Error",
										"type": "String"
									},
									"FileLoadLogID": {
										"value": {
											"value": "@pipeline().parameters.FileLoadLogID",
											"type": "Expression"
										},
										"type": "Int64"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "AzureSQL",
								"type": "LinkedServiceReference",
								"parameters": {
									"secretName": "sqlDatabaseConnectionStringConfig"
								}
							}
						},
						{
							"name": "SP - Log the error - FileLoadLog - Json Lake to Lake",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "SP - Update FileLoadLog - Json Lake to Lake",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[DI].[usp_DataFactoryLog_Insert]",
								"storedProcedureParameters": {
									"ActivityName": {
										"value": "CD - Write the file to the lake - Lake to Lake",
										"type": "String"
									},
									"DataFactoryName": {
										"value": {
											"value": "@{pipeline().DataFactory}",
											"type": "Expression"
										},
										"type": "String"
									},
									"ErrorMessage": {
										"value": {
											"value": "@activity('SP - Update FileLoadLog - Json Lake to Lake').Error.message",
											"type": "Expression"
										},
										"type": "String"
									},
									"OutputMessage": {
										"value": {
											"value": "@{activity('SP - Update FileLoadLog - Json Lake to Lake').output}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineName": {
										"value": {
											"value": "@{pipeline().Pipeline}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineRunID": {
										"value": {
											"value": "@{pipeline().RunId}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineTriggerID": {
										"value": {
											"value": "@{pipeline().TriggerId}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineTriggerName": {
										"value": {
											"value": "@{pipeline().TriggerName}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineTriggerTime": {
										"value": {
											"value": "@{pipeline().TriggerTime}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineTriggerType": {
										"value": {
											"value": "@{pipeline().TriggerType}",
											"type": "Expression"
										},
										"type": "String"
									},
									"TaskInstanceID": {
										"value": {
											"value": "@pipeline().parameters.TaskInstanceID",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"LogType": {
										"value": "Error",
										"type": "String"
									},
									"FileLoadLogID": {
										"value": {
											"value": "@pipeline().parameters.FileLoadLogID",
											"type": "Expression"
										},
										"type": "Int64"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "AzureSQL",
								"type": "LinkedServiceReference",
								"parameters": {
									"secretName": "sqlDatabaseConnectionStringConfig"
								}
							}
						},
						{
							"name": "SP - Update FileLoadLog - Json Lake to Lake",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "CD - Write the json file to the lake - Lake to Lake",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[DI].[usp_FileLoadLog_Update]",
								"storedProcedureParameters": {
									"FileLoadLogID": {
										"value": {
											"value": "@pipeline().parameters.FileLoadLogID",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"TargetFilePath": {
										"value": {
											"value": "@pipeline().parameters.TargetFilePath",
											"type": "Expression"
										},
										"type": "String"
									},
									"TargetFileName": {
										"value": {
											"value": "@pipeline().parameters.TargetFileName",
											"type": "Expression"
										},
										"type": "String"
									},
									"SuccessIndicator": {
										"value": "1",
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "AzureSQL",
								"type": "LinkedServiceReference",
								"parameters": {
									"secretName": "sqlDatabaseConnectionStringConfig"
								}
							}
						}
					]
				}
			},
			{
				"name": "IF - Task type is Blob Json File to Lake",
				"type": "IfCondition",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(or(equals(toUpper(pipeline().parameters.TaskType), toUpper('Azure Blob File to Lake')),equals(toUpper(pipeline().parameters.TaskType), toUpper('Azure Blob File to SQL'))),equals(pipeline().parameters.Log,true))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "CD - Write the json file to the lake - Blob to Lake",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "JsonSource",
									"storeSettings": {
										"type": "AzureBlobStorageReadSettings",
										"recursive": true
									}
								},
								"sink": {
									"type": "ParquetSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									}
								},
								"enableStaging": false,
								"translator": {
									"value": "@pipeline().parameters.SchemaMapping",
									"type": "Expression"
								}
							},
							"inputs": [
								{
									"referenceName": "Generic_Blob_Json_AzureIR",
									"type": "DatasetReference",
									"parameters": {
										"serviceEndpoint": {
											"value": "@pipeline().parameters.SourceServiceEndPoint",
											"type": "Expression"
										},
										"filePath": {
											"value": "@pipeline().parameters.SourceFilePath",
											"type": "Expression"
										},
										"fileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"compressionType": {
											"value": "@pipeline().parameters.CompressionType",
											"type": "Expression"
										},
										"encoding": {
											"value": "@pipeline().parameters.Encoding",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "Generic_DatalakeGen2_Parquet_AzureIR",
									"type": "DatasetReference",
									"parameters": {
										"dataLakeServiceEndPoint": {
											"value": "@pipeline().parameters.TargetServiceEndPoint",
											"type": "Expression"
										},
										"dataLakeFilePath": {
											"value": "@pipeline().parameters.TargetFilePath",
											"type": "Expression"
										},
										"dataLakeFileName": {
											"value": "@pipeline().parameters.TargetFileName",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "SP - Log the error - Write json to lake - Blob to Lake",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "CD - Write the json file to the lake - Blob to Lake",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[DI].[usp_DataFactoryLog_Insert]",
								"storedProcedureParameters": {
									"ActivityName": {
										"value": "CD - Write the file to the lake - Blob to Lake",
										"type": "String"
									},
									"DataFactoryName": {
										"value": {
											"value": "@{pipeline().DataFactory}",
											"type": "Expression"
										},
										"type": "String"
									},
									"ErrorMessage": {
										"value": {
											"value": "@activity('CD - Write the json file to the lake - Blob to Lake').Error.message",
											"type": "Expression"
										},
										"type": "String"
									},
									"OutputMessage": {
										"value": {
											"value": "@{activity('CD - Write the json file to the lake - Blob to Lake').output}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineName": {
										"value": {
											"value": "@{pipeline().Pipeline}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineRunID": {
										"value": {
											"value": "@{pipeline().RunId}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineTriggerID": {
										"value": {
											"value": "@{pipeline().TriggerId}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineTriggerName": {
										"value": {
											"value": "@{pipeline().TriggerName}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineTriggerTime": {
										"value": {
											"value": "@{pipeline().TriggerTime}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineTriggerType": {
										"value": {
											"value": "@{pipeline().TriggerType}",
											"type": "Expression"
										},
										"type": "String"
									},
									"TaskInstanceID": {
										"value": {
											"value": "@pipeline().parameters.TaskInstanceID",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"LogType": {
										"value": "Error",
										"type": "String"
									},
									"FileLoadLogID": {
										"value": {
											"value": "@pipeline().parameters.FileLoadLogID",
											"type": "Expression"
										},
										"type": "Int64"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "AzureSQL",
								"type": "LinkedServiceReference",
								"parameters": {
									"secretName": "sqlDatabaseConnectionStringConfig"
								}
							}
						},
						{
							"name": "SP - Log the error - FileLoadLog - Json Blob to Lake",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "SP - Update FileLoadLog - Json Blob to Lake",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[DI].[usp_DataFactoryLog_Insert]",
								"storedProcedureParameters": {
									"ActivityName": {
										"value": "CD - Write the file to the lake - Lake to Lake",
										"type": "String"
									},
									"DataFactoryName": {
										"value": {
											"value": "@{pipeline().DataFactory}",
											"type": "Expression"
										},
										"type": "String"
									},
									"ErrorMessage": {
										"value": {
											"value": "@activity('SP - Update FileLoadLog - Json Blob to Lake').Error.message",
											"type": "Expression"
										},
										"type": "String"
									},
									"OutputMessage": {
										"value": {
											"value": "@{activity('SP - Update FileLoadLog - Json Blob to Lake').output}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineName": {
										"value": {
											"value": "@{pipeline().Pipeline}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineRunID": {
										"value": {
											"value": "@{pipeline().RunId}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineTriggerID": {
										"value": {
											"value": "@{pipeline().TriggerId}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineTriggerName": {
										"value": {
											"value": "@{pipeline().TriggerName}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineTriggerTime": {
										"value": {
											"value": "@{pipeline().TriggerTime}",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineTriggerType": {
										"value": {
											"value": "@{pipeline().TriggerType}",
											"type": "Expression"
										},
										"type": "String"
									},
									"TaskInstanceID": {
										"value": {
											"value": "@pipeline().parameters.TaskInstanceID",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"LogType": {
										"value": "Error",
										"type": "String"
									},
									"FileLoadLogID": {
										"value": {
											"value": "@pipeline().parameters.FileLoadLogID",
											"type": "Expression"
										},
										"type": "Int64"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "AzureSQL",
								"type": "LinkedServiceReference",
								"parameters": {
									"secretName": "sqlDatabaseConnectionStringConfig"
								}
							}
						},
						{
							"name": "SP - Update FileLoadLog - Json Blob to Lake",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "CD - Write the json file to the lake - Blob to Lake",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[DI].[usp_FileLoadLog_Update]",
								"storedProcedureParameters": {
									"FileLoadLogID": {
										"value": {
											"value": "@pipeline().parameters.FileLoadLogID",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"TargetFilePath": {
										"value": {
											"value": "@pipeline().parameters.TargetFilePath",
											"type": "Expression"
										},
										"type": "String"
									},
									"TargetFileName": {
										"value": {
											"value": "@pipeline().parameters.TargetFileName",
											"type": "Expression"
										},
										"type": "String"
									},
									"SuccessIndicator": {
										"value": "1",
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "AzureSQL",
								"type": "LinkedServiceReference",
								"parameters": {
									"secretName": "sqlDatabaseConnectionStringConfig"
								}
							}
						}
					]
				}
			}
		],
		"parameters": {
			"TaskType": {
				"type": "string"
			},
			"SourceConnectionSecret": {
				"type": "string"
			},
			"TaskInstanceID": {
				"type": "string"
			},
			"SourceServiceEndPoint": {
				"type": "string"
			},
			"SourceFilePath": {
				"type": "string"
			},
			"SourceFileName": {
				"type": "string"
			},
			"TargetServiceEndPoint": {
				"type": "string"
			},
			"TargetFilePath": {
				"type": "string"
			},
			"TargetFileName": {
				"type": "string"
			},
			"SchemaMapping": {
				"type": "object"
			},
			"CompressionType": {
				"type": "string"
			},
			"ColumnDelimiter": {
				"type": "string"
			},
			"RowDelimiter": {
				"type": "string"
			},
			"EscapeCharacter": {
				"type": "string"
			},
			"QuoteCharacter": {
				"type": "string"
			},
			"FirstRowAsHeader": {
				"type": "bool"
			},
			"NullValue": {
				"type": "string"
			},
			"SkipLineCount": {
				"type": "int"
			},
			"Encoding": {
				"type": "string"
			},
			"Host": {
				"type": "string"
			},
			"SourceFileFormat": {
				"type": "string"
			},
			"KeyVaultName": {
				"type": "string"
			},
			"TaskConfig": {
				"type": "object"
			},
			"CallingPipeline": {
				"type": "string"
			},
			"UseDeltaLakeIndicator": {
				"type": "string"
			},
			"FileLoadLogID": {
				"type": "int"
			},
			"Log": {
				"type": "bool"
			}
		},
		"folder": {
			"name": "ETL/File Load/Generic File to Lake"
		},
		"annotations": []
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}