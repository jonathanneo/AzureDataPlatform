{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    // Generic params
    "tagObject": {
      "type": "object"
    },
    // Diagnostics params
    "logAnalyticsWorkspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource ID of the central Log Analytics workspace that stores security event and data used by Azure Security Center"
      }
    },
    "diagnosticsStorageAccountId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource ID of the storage account that stores all the security and audit events"
      }
    },
    "diagnosticsRetentionInDays": {
      "type": "int",
      "defaultValue": 30,
      "minValue": 0,
      "maxValue": 365,
      "metadata": {
        "description": "Number of days to retain data in the diagnostics Storage Account"
      }
    },
    // Specific params
    "akvName": {
      "type": "string"
    },
    "accessPolicy_adminIds": {
      "type": "array",
      "metadata": {
        "description": "Azure AD Object Ids to get admin access policy to this keyvault."
      }
    },
    "accessPolicy_readIds": {
      "type": "array",
      "metadata": {
        "description": "Azure AD Object Ids to get secret read access policy to this keyvault."
      }
    },
    "vaultSku": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": ["Standard", "Premium"],
      "metadata": {
        "description": "SKU for the vault"
      }
    },
    "enabledForDeployment": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Specifies if the vault is enabled for VM or Service Fabric deployment"
      }
    },
    "enabledForTemplateDeployment": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Specifies if the vault is enabled for ARM template deployment"
      }
    },
    "enableVaultForVolumeEncryption": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Specifies if the vault is enabled for volume encryption"
      }
    },
    "subnetIdArray": {
      "type": "array",
      "defaultValue": null
    },
    "bypassNetworkDefaultAction": {
      "type": "string",
      "defaultValue": "None",
      "allowedValues": ["None", "Logging", "Metrics", "AzureServices"]
    },
    "networkDefaultAction": {
      "type": "string",
      "defaultValue": "Allow",
      "allowedValues": ["Allow", "Deny"]
    }
  },
  "variables": {
    "azureLocation": "[resourceGroup().location]",
    "empty": ["blankArray"],
    "subnetIdsInArrayCompose": {
      "true": {
        "copy": [
          {
            "name": "virtualNetworkRuleObject",
            "count": "[if(equals(length(parameters('subnetIdArray')),0), 1,length(parameters('subnetIdArray')))]",
            "input": {
              "id": "[if(equals(length(parameters('subnetIdArray')),0), variables('empty')[copyIndex('virtualNetworkRuleObject')], parameters('subnetIdArray')[copyIndex('virtualNetworkRuleObject')])]",
              "action": "Allow"
            }
          }
        ]
      },
      "false": {}
    },
    "subnetIdsInArray": "[variables('subnetIdsInArrayCompose')[string(greater(length(parameters('subnetIdArray')), 0))]]",
    "copy": [
      {
        "name": "readPolicies",
        "count": "[length(parameters('accessPolicy_readIds'))]",
        "input": {
          "tenantId": "[subscription().tenantId]",
          "objectId": "[parameters('accessPolicy_readIds')[copyIndex('readPolicies')]]",
          "permissions": {
            "secrets": ["get", "list"]
          }
        }
      },
      {
        "name": "adminPolicies",
        "count": "[length(parameters('accessPolicy_adminIds'))]",
        "input": {
          "tenantId": "[subscription().tenantId]",
          "objectId": "[parameters('accessPolicy_adminIds')[copyIndex('adminPolicies')]]",
          "permissions": {
            "keys": [
              "encrypt",
              "decrypt",
              "wrapKey",
              "unwrapKey",
              "sign",
              "verify",
              "get",
              "list",
              "create",
              "update",
              "import",
              "delete",
              "recover",
              "backup",
              "restore",
              "purge"
            ],
            "secrets": [
              "get",
              "list",
              "set",
              "delete",
              "recover",
              "backup",
              "restore",
              "purge"
            ],
            "certificates": [
              "get",
              "list",
              "delete",
              "create",
              "import",
              "update",
              "managecontacts",
              "getissuers",
              "listissuers",
              "setissuers",
              "deleteissuers",
              "manageissuers",
              "recover",
              "backup",
              "restore",
              "purge"
            ]
          }
        }
      }
    ]
  },
  "resources": [
    {
      "apiVersion": "2019-09-01",
      "name": "[parameters('akvName')]",
      "type": "Microsoft.KeyVault/vaults",
      "location": "[variables('azureLocation')]",
      "tags": "[parameters('tagObject')]",
      "properties": {
        "enabledForDeployment": "[parameters('enabledForDeployment')]",
        "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
        "enabledForVolumeEncryption": "[parameters('enableVaultForVolumeEncryption')]",
        "enableSoftDelete": true,
        "accessPolicies": "[concat(variables('readPolicies'), variables('adminPolicies'))]",
        "tenantId": "[subscription().tenantId]",
        "sku": {
          "name": "[parameters('vaultSku')]",
          "family": "A"
        },
        "networkAcls": {
          "virtualNetworkRules": "[if(equals(length(parameters('subnetIdArray')),0), null(), variables('subnetIdsInArray').virtualNetworkRuleObject)]",
          "defaultAction": "[parameters('networkDefaultAction')]",
          "bypass": "[parameters('bypassNetworkDefaultAction')]"
        }
      },
      "resources": [
        {
          "condition": "[not(empty(parameters('logAnalyticsWorkspaceId')))]",
          "type": "Microsoft.KeyVault/vaults/providers/diagnosticSettings",
          "apiVersion": "2017-05-01-preview",
          "name": "[concat(parameters('akvName'), '/', 'Microsoft.Insights/', 'diagnostics')]",
          "dependsOn": ["[parameters('akvName')]"],
          "properties": {
            "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
            "storageAccountId": "[parameters('diagnosticsStorageAccountId')]",
            "metrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": "[parameters('diagnosticsRetentionInDays')]"
                },
                "timeGrain": null
              }
            ],
            "logs": [
              {
                "category": "AuditEvent",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": "[parameters('diagnosticsRetentionInDays')]"
                }
              }
            ]
          }
        }
      ]
    }
  ],
  "outputs": {
    "keyVaultName": {
      "type": "string",
      "value": "[parameters('akvName')]"
    },
    "keyVaultResourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('akvName'))]"
    },
    "keyVaultUri": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('akvName')), '2015-06-01').vaultUri]"
    }
  }
}
